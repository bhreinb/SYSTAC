const { readJsonSync, outputJsonSync } = require('fs-extra');
const { resolve } = require('path');
const glob = require('glob');

/**
 * A class to clean up the tags that was wrote to the JSON report.
 */
class CleanupTagsInJsonReport {
    /**
     * Creates an instance of CleanupTagsInJsonReport.
     */
    constructor() {
        const frameworkName = `${process.env.npm_package_name}@${process.env.npm_package_version}`;
        this.outputDirectory = process.env.npm_package_config_output_directory;
        this.filePatternToJsonReport = resolve(`${this.outputDirectory}json/${frameworkName}_report_pid_*.json`);
        this.filePatternToTagsReport = resolve(`${this.outputDirectory}tags/${frameworkName}_tags_stats_pid_*.json`);
        this.jsonReportFile = null;
        this.customJsonReport = null;
        this.tagsReportFiles = [];
        this.tagsPerTestScenario = [];
    }

    /**
     * Searches for the JSON report that was generated at the end of a cucumber test run
     * using a glob pattern, we only expect the one report to be found.
     */
    findJsonFilesInOutputDirectory() {
        // As We Only Expect The Only Json File It's Ok To Apply Pop On The Array
        this.jsonReportFile = glob.sync(this.filePatternToJsonReport).pop();
    }

    /**
     * Searches for the tag report that was generated at the end of the test run
     * using a glob pattern. The number of tag reports generated should match the
     * number of browsers we run the test scenarios across.
     */
    findTagReportFilesInOutputDirectory() {
        this.tagsReportFiles = glob.sync(this.filePatternToTagsReport);
    }

    /**
     * Used to get all the tags that were used within the task profile run. We
     * combine all the tag stats for each parallel thread into a single buffer
     * for querying later so to update the JSON report to render tags that were
     * only used in the test run.
     */
    getTagsAssociatedWithTestScenariosInTaskProfile() {
        this.tagsReportFiles.forEach((tagReport) => {
            this.tagsPerTestScenario = this.tagsPerTestScenario.concat(readJsonSync(tagReport));
        });
    }

    /* eslint no-param-reassign:
    ["error", { "props": true, "ignorePropertyModificationsFor": ["feature", "scenario"] }] */
    /**
     * Used to remove tags at epic level since we don't report tags at epic level but rather we
     * only report tags at test scenario level.
     */
    removeTagsAtEpicLevel() {
        this.customJsonReport = readJsonSync(this.jsonReportFile);
        this.customJsonReport.forEach((feature) => {
            delete feature.tags;
        });
    }

    /**
     * Used to adjust the tags for each test scenario we ran as part of the task profile.
     * Within the feature file we specify a number of combinations a test scenario will run
     * under for example test subsets & browsers|devices. This function updates the test scenario
     * within the JSON report to reflect what test subsets and browsers the tests were executed
     * against.
     */
    setTestScenariosTagsToOneUsedInTestRun() {
        this.customJsonReport.forEach((feature) => {
            feature.elements.forEach((scenario) => {
                const scenarioName = scenario.name;
                const statsScenario = this.tagsPerTestScenario.find(obj => obj.scenario === scenarioName);
                for (let i = scenario.tags.length - 1; i >= 0; i--) {
                    const tagBeenExamined = scenario.tags[i];
                    if (tagBeenExamined && (!statsScenario.tags.includes(tagBeenExamined.name))) {
                        scenario.tags.splice(i, 1);
                    }
                }
            });
        });
    }

    /**
     * Used to write out the JSON report again post all the modifications done to the original JSON
     * report that was generated using cucumberJs.
     */
    overwriteJsonReport() {
        outputJsonSync(this.jsonReportFile, this.customJsonReport, { overwrite: true, spaces: 2, EOL: '\r\n' });
    }

    /**
     * Main entry point for this program to clean up the tag report generated by cucumberJs.
     */
    static main() {
        const cleanupTagsInJsonReport = new CleanupTagsInJsonReport();
        cleanupTagsInJsonReport.findJsonFilesInOutputDirectory();
        cleanupTagsInJsonReport.findTagReportFilesInOutputDirectory();
        cleanupTagsInJsonReport.getTagsAssociatedWithTestScenariosInTaskProfile();
        cleanupTagsInJsonReport.removeTagsAtEpicLevel();
        cleanupTagsInJsonReport.setTestScenariosTagsToOneUsedInTestRun();
        cleanupTagsInJsonReport.overwriteJsonReport();
    }
}
CleanupTagsInJsonReport.main();

